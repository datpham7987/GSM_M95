
/*
 *Turn on GSM_M95
 * Vbat mức 1 trong khi pin GPS_PWRKEY cấp 1 clock( 0 1 0) // nên 2 lần để chắc chắn turn on module m95
 *UART2: PA2_TX, PA3_RX
 *
 *
 */
#include <stddef.h>
#include "stm32f10x.h"

GPIO_InitTypeDef GPIO;
USART_InitTypeDef USART;
NVIC_InitTypeDef NVIC_InitStructure;


void TurnOnPower(void);
void send_byte(char b);
void Send_string(char *a);
void Send_string_USART2(char *a);
void send_byte_USART2(char b);
void USART2_IRQHandler(void);
int main(void)
{
	 //setup GPIOA turn on GMS
	 //Power key - PA00
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);
//	GPIO.GPIO_Pin = GPIO_Pin_0;
//	GPIO.GPIO_Speed = GPIO_Speed_50MHz;
//	GPIO.GPIO_Mode=GPIO_Mode_Out_PP;
//	GPIO_Init(GPIOA, &GPIO);
//	GPIO_ResetBits(GPIOA,GPIO_Pin_0);
//	GPIO_SetBits(GPIOA,GPIO_Pin_0);
//	GPIO_SetBits(GPIOA,GPIO_Pin_0);
//	GPIO_SetBits(GPIOA,GPIO_Pin_0);
//	GPIO_ResetBits(GPIOA,GPIO_Pin_0);
//	GPIO_SetBits(GPIOA,GPIO_Pin_0);

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB,ENABLE);
	GPIO.GPIO_Pin = GPIO_Pin_8;
	GPIO.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO.GPIO_Mode=GPIO_Mode_Out_PP;
	GPIO_Init(GPIOB, &GPIO);
	GPIO_SetBits(GPIOB,GPIO_Pin_8 );

	//Setup UART1  UART_debug_COM
	RCC_APB2PeriphClockCmd(RCC_APB2ENR_USART1EN,ENABLE);
	USART.USART_BaudRate = 115200;
	USART.USART_WordLength = USART_WordLength_8b;
	USART.USART_StopBits = USART_StopBits_1;
	USART.USART_Parity = USART_Parity_No;
	USART.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART.USART_Mode = USART_Mode_Rx | USART_Mode_Tx; //the Receive or Transmit mode is enabled or disabled
	USART_Init(USART1,&USART);
	USART_Cmd(USART1,ENABLE);
	//	  USART_ITConfig(USART1, USART_IT_RXNE, ENABLE); //Enable the USART1 Receive interrupt: this interrupt is generated when the USART1 receive data register is not empty
	/* Configure USART1 Tx (PA.09) as alternate function push-pull */
	GPIO.GPIO_Pin = GPIO_Pin_9;
	GPIO.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO);
	/* Configure USART1 Rx (PA.10) as input floating */
	GPIO.GPIO_Pin = GPIO_Pin_10;
	GPIO.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO);


															// Setup USART2
	RCC_APB1PeriphClockCmd(RCC_APB1ENR_USART2EN,ENABLE);
	USART.USART_BaudRate = 115200;
	USART.USART_WordLength = USART_WordLength_8b;
	USART.USART_StopBits = USART_StopBits_1;
	USART.USART_Parity = USART_Parity_No;
	USART.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART.USART_Mode = USART_Mode_Rx | USART_Mode_Tx; //the Receive or Transmit mode is enabled or disabled
	USART_Init(USART2,&USART);
	USART_Cmd(USART2,ENABLE);
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE); //Enable the USART1 Receive interrupt: this interrupt is generated when the USART1 receive data register is not empty
	/* Configure USART2 Tx (PA2) as alternate function push-pull */
	GPIO.GPIO_Pin = GPIO_Pin_2;
	GPIO.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO);

	/* Configure USART2 Rx (PA3) as input floating */
	GPIO.GPIO_Pin = GPIO_Pin_3;
	GPIO.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_Init(GPIOA, &GPIO);
	// NVIC _ interrupt Rx_USART2
	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
//	TurnOnPower();

  while (1)
  {
	  TurnOnPower();
	  GPIO_ResetBits(GPIOB,GPIO_Pin_8);
	  for(int i = 0; i < 5000000; i ++)
	  {

	  }
	  GPIO_SetBits(GPIOB,GPIO_Pin_8);
	  for(int i = 0; i < 5000000; i++)
	  {

	  }
  }
}


void send_byte(char b)
{
  /* Send one byte */
  USART_SendData(USART1, b);

  /* Loop until USART2 DR register is empty */
  while (USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
  USART_ClearFlag(USART1,USART_FLAG_TXE);
}
void Send_string(char *a)
{
	 while(*a)
	 {
		 send_byte(*a);
		 a++;
	 }
}

void Send_string_USART2(char *a)
{
	 while(*a)
	 {
		 send_byte_USART2(*a);
		 a++;
	 }
}
void send_byte_USART2(char b)
{
  /* Send one byte */
  USART_SendData(USART2, b);

  /* Loop until USART2 DR register is empty */
  while (USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
  USART_ClearFlag(USART2,USART_FLAG_TXE);
}
void USART2_IRQHandler(void)
{
	 char c;
	 if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
	 {
		 USART_ClearITPendingBit(USART2, USART_IT_RXNE);
		 c = USART_ReceiveData(USART2);
		 send_byte(c);

	 }
}
void TurnOnPower(void)
{
//	Send_string_USART2("AT+IPR=0");
//	for(int i = 0; i < 10000000; i ++)
//	{
//
//	}
	Send_string_USART2("AT");
	for(int i = 0; i < 5000000; i ++)
	{

	}
//	Send_string_USART2("AT");
//	for(int i = 0; i < 5000000; i ++)
//	{
//
//	}
//	Send_string_USART2("AT+IPR=115200");
//	for(int i = 0; i < 5000000; i ++)
//	{
//
//	}
//	Send_string_USART2("AT&W");
//	for(int i = 0; i < 5000000; i ++)
//	{
//
//	}
}
